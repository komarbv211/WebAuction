// <auto-generated />
using System;
using Data.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(AuctionDbContext))]
    [Migration("20240827190255_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Data.Entities.Bid", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<DateTime>("BidTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("BidderId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LotId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LotId");

                    b.ToTable("Bids");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 550,
                            BidTime = new DateTime(2024, 8, 22, 22, 2, 53, 322, DateTimeKind.Local).AddTicks(2791),
                            BidderId = "bb8959f7-f59a-4328-bbdb-8bfe439cd7f4",
                            LotId = 1
                        },
                        new
                        {
                            Id = 2,
                            Amount = 600,
                            BidTime = new DateTime(2024, 8, 23, 22, 2, 53, 322, DateTimeKind.Local).AddTicks(2806),
                            BidderId = "bb8959f7-f59a-4328-bbdb-8bfe439cd7f4",
                            LotId = 1
                        },
                        new
                        {
                            Id = 3,
                            Amount = 700,
                            BidTime = new DateTime(2024, 8, 24, 22, 2, 53, 322, DateTimeKind.Local).AddTicks(2811),
                            BidderId = "bb8959f7-f59a-4328-bbdb-8bfe439cd7f4",
                            LotId = 1
                        });
                });

            modelBuilder.Entity("Data.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Electronics"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Sport"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Fashion"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Home & Garden"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Transport"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Toys & Hobbies"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Musical Instruments"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Art"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Other"
                        });
                });

            modelBuilder.Entity("Data.Entities.Lot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Archived")
                        .HasColumnType("bit");

                    b.Property<int>("BidCount")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HighestBid")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LastRate")
                        .HasColumnType("int");

                    b.Property<int?>("MinBidIncrement")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("RateStep")
                        .HasColumnType("int");

                    b.Property<int?>("SellerMinPrice")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartOfBidding")
                        .HasColumnType("datetime2");

                    b.Property<int>("StartPrice")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Lots");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Archived = false,
                            BidCount = 0,
                            CategoryId = 1,
                            Description = "Latest model",
                            HighestBid = 0,
                            ImageUrl = "https://cdn.new-brz.net/app/public/models/MQAG2/large/w/180413170205345780.webp",
                            LastRate = 650,
                            MinBidIncrement = 50,
                            Name = "iPhone X",
                            Quantity = 5,
                            RateStep = 10,
                            StartOfBidding = new DateTime(2024, 8, 28, 22, 2, 53, 322, DateTimeKind.Local).AddTicks(2574),
                            StartPrice = 500
                        },
                        new
                        {
                            Id = 2,
                            Archived = false,
                            BidCount = 0,
                            CategoryId = 2,
                            Description = "Strength training",
                            HighestBid = 0,
                            ImageUrl = "https://powerball.ua/content/images/46/480x480l50nn0/kystovyi-trenazher-powerball-e-titan-pro-electric-start-85723670147321.jpg",
                            LastRate = 45,
                            MinBidIncrement = 5,
                            Name = "PowerBall",
                            Quantity = 3,
                            RateStep = 5,
                            StartOfBidding = new DateTime(2024, 9, 1, 22, 2, 53, 322, DateTimeKind.Local).AddTicks(2667),
                            StartPrice = 20
                        },
                        new
                        {
                            Id = 3,
                            Archived = false,
                            BidCount = 0,
                            CategoryId = 3,
                            Description = "Comfortable sportswear",
                            HighestBid = 0,
                            ImageUrl = "https://lh5.googleusercontent.com/proxy/mMh-P0oMHtmHlosJf4VKCNQEIq6201qQb8iaWP39c24dFaWNo8rM8EOVQevKbhc8vOrMbmCUJYR_PEfdrx4MVqd5dlIggBUvJmUSTKO2JnI",
                            LastRate = 189,
                            MinBidIncrement = 10,
                            Name = "Nike T-Shirt",
                            Quantity = 3,
                            RateStep = 15,
                            StartOfBidding = new DateTime(2024, 8, 30, 22, 2, 53, 322, DateTimeKind.Local).AddTicks(2674),
                            StartPrice = 50
                        },
                        new
                        {
                            Id = 4,
                            Archived = false,
                            BidCount = 0,
                            CategoryId = 1,
                            Description = "Newest model",
                            HighestBid = 0,
                            ImageUrl = "https://hotline.ua/img/tx/370/3708775135.jpg",
                            LastRate = 1200,
                            MinBidIncrement = 100,
                            Name = "Samsung S23",
                            Quantity = 0,
                            RateStep = 50,
                            StartOfBidding = new DateTime(2024, 9, 6, 22, 2, 53, 322, DateTimeKind.Local).AddTicks(2680),
                            StartPrice = 1000
                        },
                        new
                        {
                            Id = 5,
                            Archived = false,
                            BidCount = 0,
                            CategoryId = 6,
                            Description = "Toys for kids",
                            HighestBid = 0,
                            ImageUrl = "https://sport.qc.ca/wp-content/uploads/2021/01/dsl-original-images/loi_air18_18_air_ball_ballon_air_18_1486249200_1488836710.jpg",
                            LastRate = 50,
                            MinBidIncrement = 2,
                            Name = "Air Ball",
                            Quantity = 0,
                            RateStep = 5,
                            StartOfBidding = new DateTime(2024, 8, 31, 22, 2, 53, 322, DateTimeKind.Local).AddTicks(2686),
                            StartPrice = 10
                        },
                        new
                        {
                            Id = 6,
                            Archived = false,
                            BidCount = 0,
                            CategoryId = 1,
                            Description = "Powerful laptop",
                            HighestBid = 0,
                            ImageUrl = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTyR7bUxH63AoIF2_TESOi2pgOgdEn5x4qAYA&s",
                            LastRate = 2300,
                            MinBidIncrement = 200,
                            Name = "MacBook Pro 2019",
                            Quantity = 23,
                            RateStep = 100,
                            StartOfBidding = new DateTime(2024, 9, 10, 22, 2, 53, 322, DateTimeKind.Local).AddTicks(2696),
                            StartPrice = 2000
                        },
                        new
                        {
                            Id = 7,
                            Archived = false,
                            BidCount = 0,
                            CategoryId = 2,
                            Description = "Older model",
                            HighestBid = 0,
                            ImageUrl = "https://remont2.lvivservice.com.ua/upload/iblock/b39/S4.png",
                            LastRate = 440,
                            MinBidIncrement = 10,
                            Name = "Samsung S4",
                            Quantity = 0,
                            RateStep = 20,
                            StartOfBidding = new DateTime(2024, 8, 29, 22, 2, 53, 322, DateTimeKind.Local).AddTicks(2702),
                            StartPrice = 100
                        });
                });

            modelBuilder.Entity("Data.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateWon")
                        .HasColumnType("datetime2");

                    b.Property<int>("FinalPrice")
                        .HasColumnType("int");

                    b.Property<int>("LotId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("LotId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Data.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Birthdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Data.Entities.Bid", b =>
                {
                    b.HasOne("Data.Entities.Lot", "Lot")
                        .WithMany("Bids")
                        .HasForeignKey("LotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lot");
                });

            modelBuilder.Entity("Data.Entities.Lot", b =>
                {
                    b.HasOne("Data.Entities.Category", "Category")
                        .WithMany("Lots")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Data.Entities.Order", b =>
                {
                    b.HasOne("Data.Entities.Lot", "Lot")
                        .WithMany()
                        .HasForeignKey("LotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lot");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Entities.Category", b =>
                {
                    b.Navigation("Lots");
                });

            modelBuilder.Entity("Data.Entities.Lot", b =>
                {
                    b.Navigation("Bids");
                });
#pragma warning restore 612, 618
        }
    }
}
